---
import '../styles/global.css';
import GridBackground from '../components/GridBackground.astro';
import CustomCursor from '../components/CustomCursor.astro';
import SmoothScroll from '../components/SmoothScroll.astro';
---

<html lang="en" class="dark">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <meta name="robots" content="noindex, nofollow" />
    <title>null</title>
    
    <!-- Preload critical fonts -->
    <link rel="preload" href="/fonts/InstrumentSans[wght].woff2" as="font" type="font/woff2" crossorigin>
    <link rel="preload" href="/fonts/Castoro-Regular.woff2" as="font" type="font/woff2" crossorigin>
    
    <!-- Critical CSS inline -->
    <style>
      /* Font-face declarations */
      @font-face {
        font-family: 'Instrument Sans';
        src: url('/fonts/InstrumentSans[wght].woff2') format('woff2');
        font-weight: 100 900;
        font-style: normal;
        font-display: swap;
      }
      @font-face {
        font-family: 'Castoro';
        src: url('/fonts/Castoro-Regular.woff2') format('woff2');
        font-weight: 400;
        font-style: normal;
        font-display: swap;
      }
      
      /* Critical base styles */
      html, body {
        font-family: 'Instrument Sans', system-ui, sans-serif;
        margin: 0;
        width: 100%;
        height: 100%;
        color-scheme: dark;
      }
      
      * {
        box-sizing: border-box;
      }
      
      /* Critical utility classes */
      .font-serif {
        font-family: 'Castoro', serif;
      }
      
      .text-gradient {
        background-clip: text;
        -webkit-background-clip: text;
        color: transparent;
        background-image: linear-gradient(190deg, #b2b2b2 0%, #ffffff 75%);
      }
      
      /* Section spacing variables */
      :root {
        --section-margin-mobile: 6rem;
        --section-margin-tablet: 8rem;
        --section-margin-desktop: 10rem;
      }
      
      .section-spacing {
        margin-top: var(--section-margin-mobile);
        margin-bottom: var(--section-margin-mobile);
      }
      
      @media (min-width: 768px) {
        .section-spacing {
          margin-top: var(--section-margin-tablet);
          margin-bottom: var(--section-margin-tablet);
        }
      }
      
      @media (min-width: 1024px) {
        .section-spacing {
          margin-top: var(--section-margin-desktop);
          margin-bottom: var(--section-margin-desktop);
        }
      }
    </style>
  </head>
  <body class="bg-black text-white min-h-screen">
    <GridBackground />
    <CustomCursor />
    <SmoothScroll />
    <slot />
    
    <!-- Section Fade-In Animation Script -->
    <script>
      // Intersection Observer for section fade-in
      document.addEventListener('DOMContentLoaded', () => {
        // Small delay to ensure all components are rendered
        setTimeout(() => {
          console.log('Setting up section fade observer...');
          
          const observer = new IntersectionObserver(
            (entries) => {
              entries.forEach((entry) => {
                console.log('Observer triggered for:', entry.target.className, 'isIntersecting:', entry.isIntersecting);
                if (entry.isIntersecting) {
                  console.log('Adding fade-in class to:', entry.target.className);
                  entry.target.classList.add('fade-in');
                  observer.unobserve(entry.target); // Stop observing once faded in
                }
              });
            },
            {
              threshold: 0.1, // Trigger when 10% visible
              rootMargin: '0px 0px 0px 0px' // No margin - trigger when element enters viewport
            }
          );

          // Observe all sections with section-fade class
          const sections = document.querySelectorAll('.section-fade');
          console.log('Found sections to observe:', sections.length);
          sections.forEach((section, index) => {
            console.log(`Observing section ${index}:`, section.className);
            console.log(`Initial opacity:`, window.getComputedStyle(section).opacity);
            observer.observe(section);
          });
        }, 100); // 100ms delay
      });
    </script>
  </body>
</html>