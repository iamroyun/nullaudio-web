---
// Static floating cards around centered text; no filtering/interactivity required
import TextReveal from './TextReveal.astro';
---
 
<section class="relative min-h-screen bg-black text-white overflow-hidden">
  <!-- Centered Text -->
  <div class="absolute inset-0 flex items-center justify-center p-4">
    <div class="text-center max-w-xl">
      <!-- Reusable GSAP text reveal applied to each line -->
      <TextReveal client:load>
        <p class="text-gray-400 text-sm">THE MAJORITY OF MY LIFE I SPENT</p>
        <p class="text-gray-400 text-sm">ALONE QUIETLY SITTING IN A</p>
        <p class="text-gray-400 text-sm">DIMLY LIT ROOM. WHILE IT WAS</p>
        <p class="text-gray-400 text-sm">LONELY, THIS IS WHERE I FELT</p>
        <p class="text-gray-400 text-sm">SAFE. I WISH NOWADAYS I COULD</p>
        <p class="text-gray-400 text-sm">SAY THE SAME. BUT THINGS</p>
        <p class="text-gray-400 text-sm">CHANGED.</p>
      </TextReveal>
    </div>
  </div>

  <!-- Floating Cards -->
  <div class="pointer-events-auto">
    <!-- Top Left -->
    <div class="card" style="top:8%;left:24%" data-depth="10">
      <img src="/images/samplepack-1.jpg" alt="Fragment 1" class="w-full h-full object-cover" />
      <div class="tags">
        <span>GUITAR</span><span>SAD</span><span>INDIE</span>
      </div>
      <div class="overlay">
        <button class="cta">
          <span class="icon"></span>
          <span>INSPECT →</span>
        </button>
      </div>
    </div>

    <!-- Top Right -->
    <div class="card" style="top:12%;right:14%" data-depth="14">
      <img src="/images/samplepack-1.jpg" alt="Fragment 2" class="w-full h-full object-cover" />
      <div class="tags">
        <span>GUITAR</span><span>SAD</span><span>INDIE</span>
      </div>
      <div class="overlay">
        <button class="cta">
          <span class="icon"></span>
          <span>INSPECT →</span>
        </button>
      </div>
    </div>

    <!-- Bottom Left -->
    <div class="card" style="bottom:10%;left:16%" data-depth="8">
      <img src="/images/samplepack-1.jpg" alt="Fragment 3" class="w-full h-full object-cover" />
      <div class="tags">
        <span>GUITAR</span><span>SAD</span><span>INDIE</span>
      </div>
      <div class="overlay">
        <button class="cta">
          <span class="icon"></span>
          <span>INSPECT →</span>
        </button>
      </div>
    </div>
  </div>
</section>

<style>
  /* Floating card presentation */
  .card {
    position: absolute;
    width: 16rem; /* w-64 */
    height: 16rem; /* h-64 */
    border-radius: 0.5rem; /* rounded-lg */
    overflow: hidden;
    background: rgb(31 41 55); /* bg-gray-800 */
    box-shadow: 0 10px 15px -3px rgba(168, 85, 247, 0.1), 0 4px 6px -2px rgba(168, 85, 247, 0.05);
    transform: translate3d(var(--tx, 0), var(--ty, 0), 0);
    transition: transform 300ms ease, box-shadow 300ms ease;
  }
  .card:hover { transform: translate3d(var(--tx, 0), calc(var(--ty, 0) - 0.5rem), 0); box-shadow: 0 10px 25px rgba(168,85,247,0.3); }

  .overlay { position:absolute; inset:0; display:flex; align-items:center; justify-content:center; background:rgba(0,0,0,0.5); opacity:0; transition:opacity 200ms ease; }
  .card:hover .overlay { opacity:1; }

  .cta { display:flex; align-items:center; gap:0.5rem; padding:0.5rem 1rem; background:#a855f7; color:white; border-radius:9999px; }
  .cta:hover { background:#9333ea; }

  .icon { width:1rem; height:1rem; background:white; border-radius:0.125rem; }

  .tags { position:absolute; top:0.5rem; left:0.5rem; display:flex; gap:0.25rem; }
  .tags > span { font-size:0.75rem; color:rgb(156,163,175); background:rgb(17,24,39); padding:0.25rem 0.5rem; border-radius:9999px; }
</style>

<!-- Parallax movement for cards based on cursor position -->
<script>
  const cards = document.querySelectorAll('.card');
  window.addEventListener('mousemove', (e) => {
    const w = window.innerWidth;
    const h = window.innerHeight;
    const nx = (e.clientX / w) * 2 - 1; // -1..1
    const ny = (e.clientY / h) * 2 - 1; // -1..1
    cards.forEach((el) => {
      const depth = Number(el.getAttribute('data-depth') || '10');
      const tx = (-nx * depth).toFixed(2) + 'px';
      const ty = (-ny * depth).toFixed(2) + 'px';
      (el as any).style.setProperty('--tx', tx);
      (el as any).style.setProperty('--ty', ty);
    });
  });
</script>